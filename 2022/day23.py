from helpers import *
from collections import *
from itertools import *
from math import *
from heapq import heappush, heappop, heappushpop, heapify, heapreplace
from functools import cache


example = """
....#..
..###.#
#...#.#
.#...##
#.###..
##.#.##
.#..#..
"""

actual = """
.##...###..#.##...#.#..#.#.###.#.####......#.##.##.#.#..##......#..##...
.###.#.##.#.##.###.####.####.##...#..##.#..##..##.####..#.##..###.##....
##.#..#.#.####.###.##....##.##...##..###.###..###....#.#..##.##..#..#.#.
#..##.#.....#.##.#......#.###..##.##.........###...##.#.#..#.....###.#..
..#...##..##.....#...#.#..#.##..##.#.#..#.#...#.###.#.#.#.....#..##..###
#.####.#..#..#######..##.###...##..#...#..#.#..##..##.#......#.#.#.###..
#.####.###..###.####..#.#.##...##....#.#.##..#.#..#..###.#..#...#.#....#
..#.#.#...#.....#.###..#####.###.####..#.#..#.#......##..#####..#..#.#..
....#...####..#.###..##.###....#...####.##...##.##.#.###.#...####.#.##.#
#..#######..#.###.###..##..#..###......###..###.#.#####.##..#..#..###..#
.#...#....##......#..###.##.####.#.#...#.####.#....##.##.#....###..##.#.
..##..#...#..##....#...#..#.#.##..###...#..###.#...#######....###..####.
#.#..##.###..##.#.#####..#....#.##.#.##.......##.##.....#..###.#....##..
#..#.##...###.##..#...##.######...#...####.#...###..##.###..#.#.###.#.#.
##.#....####...#..##..##.####.###...#..####...#.#...##.####.#.##....##..
#.#..#.#.......#.###.#.#.###.###.#..##..#.#.####..###.######.####.....#.
###.....##...#.#.#.#..##...##.#.#.#.#..##.#.....#.####.##.#...#.####...#
###.#.##....##..###.#.##..######.#.##...#...##.#..#.##.######..#...#..##
####......####....##.#.#..#.##....#####.#..####.#####.##..###.#.#..###.#
..#..####...####.######.#.#.###..#.###....#..#..#.#.....####...#...##.#.
............####...###.#..#####..#..###.....#.#.##..#..#....#..#.#.##.#.
###..#####..#...##.#####.....##....##..##.##.#.##..#.#.#.#.....#.####.##
.#..#.######.#...#.#######......#...#.#.###..####....##....##..##..##..#
#.###.#.#.#..####.##..##.#..###..#..#.#.#..#.#..#..#..##...####.#...##.#
........#..#..###.###.##..######..#...###...#.##.##...##.###...#.#......
.###..#.####.###..#..###...###.####.####..#....#.#.#.#.#.#.##.#.####...#
#.#..##.......##.#.#.#.#.#.#####..........##.######.##.##....##......##.
.#.#...#...#.###..#.##..#...#....####...#####.###.#...##....###...##.#.#
#..........##.##.#.##.#....##....##...###...##.#.#.####.####....#...#.##
####...#.##...##..#.##....###.#.###..#.##...#.###.###...#..#####....#..#
...##.......#.#.#....##..#####.#.#.##.###.#.#.#.###.#####...#.#...#.##..
.##...#...##..####.#######..##..###...#..#.....##.#.#.###...#..##.##.##.
.#.######.##.###...#..#...#..#..#.###.#....##.#####..###.###.##.#.#.##..
.#####..#...#..##.##..####.##...##..#..#.#..#...##.######..#..###..##..#
...#.......##...#.###.#.#..#########...#..#.###.#.#.###.#.#.####.#..#...
.#.##.#..#.###.#.#.#.#.#.#..###..#...####..#..#.#.#.#####.#.######.##.##
...#....#..####.....##...#####.#..#.##.#.###.#...#.#..###.#..##..##.##..
.#.##.#...#..#.#..#..#....#...#.....######..##.#.##.#.#..##...#...##.#..
...##.########.........####........#.#..#...##.##.##..##.##.##.###..####
##...#...##..#...###...#.######......##...#..#.#.#.##..##.....##.#...#..
..###.#...#..#####.#.....#.#.###.#.#.#.##.#.####.##..#...#...#.###.###..
.####...###..#.....####..#..######.#.....###..#....#....####...#.#.##..#
#..#.#..##.#..#...#.#..#..###..##..##.##.#.#.#..##...#.#..####.###....#.
###....#.##..####.##.##.#.#..#####.#.##..#.#....#....#.#.##.....#..####.
#..##.####.##..##......#.#...#.####.#.####....###...#....#...#####...##.
...#..##.#.#.....#.#..#.#..#......####.###..##.##..##..#####...####..#.#
..#.#.#....#.##.....#..#.#.##...#.##....##.##...#.#.###.#####..#.#..#.##
##..######.#....#.######.#..##.###..#.....##.##.#.#..##....####...#....#
.######.##.#.......####..#.#.###...#....#......##..###.#........#..#.##.
##.....#.#.##.....#####.#...#..##.##..####.#..#..#....#.#.######..##..#.
#.##....###.#.##.###.#.##..###..#..####..#.#.###..#.##..#...#...#..#.###
..#.###..####.######.###...####..#.######..#...#.##...###.#.####.######.
.....#.###.....#.##.####.#.#....###.#.#.#.#.###.#........#....##..#..###
.##.....#.#.....#..#.#......#.#.##...#####.####..#.#..###......#....##..
.##.....#.#......#.#.##.#.#.#....##.##.####..#####.#.#..#..##...#.##.###
##...##...#....###...##.#..##.##.#.#.##.#.#.##....#.#.##...#####.##....#
.#...##...#.....#####...#.#.#.###...#.#.....#..#.#.#...#...#.#..####.#.#
.##...######..##.#.##.##.#.......#.######..#.##...#..#...#.####..#.#.#..
.#...##.##.#..########...#####.......#...####.....###.##....#.#####.#...
#.#....#..###.#...###...###.#..#...#..##..#..#.#.##...#.#.###...###.###.
###.#...#.#....#..#..#.####.#..##.##.#..##.##...###...##.#.####.#.#....#
#.#.#...#..#####....#.#.#..##.....#..##..##.....#..#..........##.#.###.#
##.#...##..#.##....#.#...#...##..##.#..##.#.........##.###.#.#.#.....#..
.##...#...#...####.#...#.####.###.#.#.#.#....##...##.#.##.#.#.##.#######
#...#.##..........#.##.###....#.####.#.###..#.#.#.....###.#.#####..##.#.
.#...##.......##.#..##.##..###........#.#..#..###...#.##..#...##...#..##
.#.#.#.#.##....##..######..#...###.##....#####...##.......#####.#...###.
.#..######...##..##.#....##.#..#.#.###..#...########..###.#.....##..###.
...#..#..#.#######...####....##......#......#..######..#.####.#.#..#...#
.#####.#####..####.###..#....#...###.##.##..#.###.#..#.#..#.##.#....#...
#..###.####..#.....####.#.#..##..##.#.####...#.#..#..#.###.#.###........
#.##.#.##...#...#.#.#.###.#..##.##..##.#....#..#.....#...####.#.#...#.##
"""

def do_round(elves, grid, priority):
    proposals = {}
    locations = set(elves.values())
    for elf in elves:
        x, y = elves[elf]
        if all((i, j) not in locations for i, j in neighbors(x, y)):
            continue
        possible = [None, None, None, None]
        # North
        no_north = all((x+dx, y-1) not in locations for dx in range(-1, 2))
        if no_north:
            possible[0] = (x, y-1)
        no_south = all((x+dx, y+1) not in locations for dx in range(-1, 2))
        if no_south:
            possible[1] = (x, y+1)
        no_west = all((x-1, y+dy) not in locations for dy in range(-1, 2))
        if no_west:
            possible[2] = (x-1, y)
        no_east = all((x+1, y+dy) not in locations for dy in range(-1, 2))
        if no_east:
            possible[3] = (x+1, y)
        proposal = None
        for i in range(4):
            idx = (priority + i) % 4
            if possible[idx] is not None:
                proposals[elf] = possible[idx]
                break

    cnt = Counter(proposals.values())
    moves = {}
    for elf, p in proposals.items():
        if cnt[p] == 1:
            moves[elf] = p
    return moves


def print_grid(elves):
    pos = elves.values()
    miny, maxy = min(p[0] for p in pos), max(p[0] for p in pos)
    minx, maxx = min(p[1] for p in pos), max(p[1] for p in pos)

    for y in range(miny, maxy+1):
        row = ''
        for x in range(minx, maxx+1):
            if (x, y) in pos:
                row += '#'
            else:
                row += '.'
        print(row)


def solvea(inp):
    inp = inp.strip().split('\n')
    grid = list(map(list, inp))
    elves = {}
    cnt = 0
    for y in range(len(grid)):
        for x in range(len(grid[0])):
            if grid[y][x] == '#':
                elves[cnt] = (x, y)
                cnt += 1

    priorities = {e:0 for e in elves}

    cnt = 0
    rounds = 10
    while cnt < rounds:
        moves = do_round(elves, grid, cnt % 4)
        for elf, move in moves.items():
            x, y = elves[elf]
            nx, ny = move
            elves[elf] = (nx, ny)
        cnt += 1

    pos = elves.values()
    miny, maxy = min(p[0] for p in pos), max(p[0] for p in pos)
    minx, maxx = min(p[1] for p in pos), max(p[1] for p in pos)
    
    ans = (maxx - minx + 1) * (maxy - miny + 1) - len(elves)
    return ans


def solve(inp):
    inp = inp.strip().split('\n')
    grid = list(map(list, inp))
    elves = {}
    cnt = 0
    for y in range(len(grid)):
        for x in range(len(grid[0])):
            if grid[y][x] == '#':
                elves[cnt] = (x, y)
                cnt += 1

    priorities = {e:0 for e in elves}

    cnt = 0
    while True:
        moves = do_round(elves, grid, cnt % 4)
        if len(moves) == 0:
            return cnt +1 
        for elf, move in moves.items():
            x, y = elves[elf]
            nx, ny = move
            elves[elf] = (nx, ny)
        cnt += 1


def neighbors(x, y):
    for dy in range(-1, 2):
        for dx in range(-1, 2):
            if not (dy == 0 and dx == 0):
                yield x + dx, y + dy


if __name__=='__main__':
    example_ans = solvea(example)
    print(f'example:\n {example_ans}')

    actual_ans = solvea(actual)
    print(f'actual:\n {actual_ans}')

    example_ans = solve(example)
    print(f'example:\n {example_ans}')

    actual_ans = solve(actual)
    print(f'actual:\n {actual_ans}')
